# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    router.request_context.scheme: '%env(string:ROUTE_PROTOCOL)%'
    router.request_context.host: '%env(string:ROUTE_HOST)%'
    router.request_context.base_url: '%env(string:ROUTE_BASE)%'

    asset.request_context.base_path: '%env(string:ROUTE_BASE)%'
    asset.request_context.secure: auto

    pn.data_dir: '%env(string:PN_DATA_DIR)%'
    pn.clamd_socket: '%env(string:PN_CLAMD_SOCKET)%'
    pn.uuid: '%env(string:PN_UUID)%'
    pn.remove_completed_deposits: '%env(string:PN_REMOVE_COMPLETE_DEPOSIT)%'
    pn.save_deposit_xml: '%env(string:PN_SAVE_XML)%'
    pn.service_uri: '%env(string:PN_SERVICE_URI)%'
    pn.accepting: '%env(bool:PN_ACCEPTING)%'

    pn.network_default: The PKP Preservation Network failed to communicate with your journal.
    pn.network_accepting: The PKP Preservation Network has agreed to receive deposits from your journal.
    pn.network_unsupported_version: The journal must be running at least OJS %s to make deposits to the PKP Preservation Network.

    pn.min_accepted_version: 2.4.8.0
    pn.max_accepted_version: ~
    pn.max_harvest_attempts: 5
    pn.max_au: 100000000
    pn.max_upload: 1000000
    pn.checksum_type: SHA-1

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments', 'knp_paginator.injectable']

    App\Controller\LockssController:
        calls:
            - [ setLogger, ['@monolog.logger.lockss'] ]

    App\Controller\SwordController:
        calls:
            - [ setLogger, ['@monolog.logger.sword'] ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\SwordExceptionListener:
        arguments: ["%kernel.environment%"]
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
            - { name: kernel.event_listener, event: kernel.controller }

    App\EventListener\TermsOfUseListener:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: preRemove }

    App\Menu\Builder:
        tags:
            - { name: knp_menu.menu_builder, method: mainMenu, alias: main}

    blackwhitelist:
        class: App\Services\BlackWhiteList

    App\Services\FilePaths:
        arguments:
            $root: '%pn.data_dir%'
            $projectDir: '%kernel.project_dir%'

    App\Services\Ping:
        arguments:
            $minVersion: '%pn.min_accepted_version%'

    App\Services\Processing\Depositor:
        arguments:
            $maxAcceptedVersion: '%pn.max_accepted_version%'

    App\Services\Processing\Harvester:
        arguments:
            $maxHarvestAttempts: '%pn.max_harvest_attempts%'

    App\Services\Processing\VirusScanner:
        arguments:
            $socketPath: '%pn.clamd_socket%'

    App\Command\Processing\StatusCommand:
        arguments:
            $cleanup: '%pn.remove_completed_deposits%'

    App\Services\Processing\BagReserializer:
        arguments:
            $maxAuSize: '%pn.max_au%'

    App\Services\SwordClient:
        arguments:
            $serviceUri: '%pn.service_uri%'
            $uuid: '%pn.uuid%'
            $saveXml: '%pn.save_deposit_xml%'

    App\Services\DepositBuilder:
        arguments:
            $hostname: '%router.request_context.host%'

    App\Services\JournalBuilder:
        arguments:
            $hostname: '%router.request_context.host%'
