security:
    enable_authenticator_manager: true

    encoders:
        Nines\UserBundle\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: Nines\UserBundle\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            guard:
                authenticators:
                    - Nines\UserBundle\Security\LoginFormAuthenticator
            user_checker: Nines\UserBundle\Security\UserChecker
            logout:
                path: nines_user_security_logout
                target: homepage

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week
                path: '%router.request_context.base_url%'
                samesite: strict
                httponly: true
                name: PKPPLN_REMEMBER_ME

    role_hierarchy:
        ROLE_ADMIN: [ ROLE_USER ]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Default controller stuff - open to the public
        - { path: ^/$, roles: PUBLIC_ACCESS }
        - { path: ^/privacy$, roles: PUBLIC_ACCESS }

        # user controller stuff - open to the public
        - { path: ^/request$, roles: PUBLIC_ACCESS }
        - { path: ^/reset, roles: PUBLIC_ACCESS }
        - { path: ^/login$, roles: PUBLIC_ACCESS }

        # Other controllers that should never be public
        - { path: ^/dublin_core/element, roles: ROLE_USER }
        - { path: ^/feedback/comment_note, roles: ROLE_USER }
        - { path: ^/feedback/comment_status, roles: ROLE_USER }

        # Journal access via SWORD API
        - { path: ^/api, role: PUBLIC_ACCESS }

        # LOCKSS access
        - { path: ^/fetch, role: PUBLIC_ACCESS }
        - { path: ^/permission, role: PUBLIC_ACCESS }
