<?php

declare(strict_types=1);

/*
 * (c) 2020 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace App\Entity;

use DateTime;
use DateTimeInterface;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\PersistentCollection;
use Nines\UtilBundle\Entity\AbstractEntity;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Journal.
 *
 * @ORM\Table(name="journal", indexes={
 *     @ORM\Index(columns={"uuid", "title", "issn", "url", "email", "publisher_name", "publisher_url"}, flags={"fulltext"})
 * })
 * @ORM\Entity(repositoryClass="App\Repository\JournalRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Journal extends AbstractEntity
{
    /**
     * List of states where a deposit has been sent to LOCKSSOMatic.
     */
    public const SENT_STATES = [
        'deposited',
        'complete',
        'status-error',
    ];

    /**
     * The URL suffix for the ping gateway.
     *
     * This suffix is appended to the Journal's URL for to build the ping URL.
     */
    public const GATEWAY_URL_SUFFIX = '/gateway/plugin/PLNGatewayPlugin';

    /**
     * Journal UUID, as generated by the PKP Preservation Network plugin.
     *
     * @ORM\Column(type="string", length=36, nullable=false)
     */
    private string $uuid;

    /**
     * When the journal last contacted the staging server.
     *
     * @ORM\Column(type="datetime", nullable=false)
     */
    private DateTimeInterface $contacted;

    /**
     * OJS version powering the journal.
     *
     * @ORM\Column(type="string", nullable=true, length=12)
     */
    private ?string $ojsVersion = null;

    /**
     * When the journal manager was notified.
     *
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?DateTimeInterface $notified = null;

    /**
     * The title of the journal.
     *
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $title = null;

    /**
     * Journal's ISSN.
     *
     * @ORM\Column(type="string", length=9, nullable=true)
     */
    private ?string $issn = null;

    /**
     * The journal's URL.
     *
     * @Assert\Url
     * @ORM\Column(type="string", nullable=false)
     */
    private string $url;

    /**
     * The status of the journal's health.
     *
     * One of new, healthy, unhealthy, triggered, or abandoned.
     *
     * @ORM\Column(type="string", nullable=false)
     */
    private string $status;

    /**
     * True if a ping reports that the journal manager has accepts the terms of use.
     *
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $termsAccepted;

    /**
     * Email address to contact the journal manager.
     *
     * @Assert\Email
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $email = null;

    /**
     * Name of the publisher.
     *
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $publisherName = null;

    /**
     * Publisher's website.
     *
     * @Assert\Url
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $publisherUrl = null;

    /**
     * The journal's deposits.
     *
     * @var Collection<int,Deposit>|Deposit[]
     * @ORM\OneToMany(targetEntity="Deposit", mappedBy="journal", fetch="EXTRA_LAZY")
     */
    private Collection $deposits;

    /**
     * Construct a journal.
     */
    public function __construct()
    {
        parent::__construct();
        $this->status = 'healthy';
        $this->contacted = new DateTime();
        $this->termsAccepted = false;
        $this->deposits = new ArrayCollection();
    }

    /**
     * Return the journal's title or UUID if the title is unknown.
     */
    public function __toString(): string
    {
        return $this->title ?: $this->uuid;
    }

    /**
     * Set uuid.
     */
    public function setUuid(string $uuid): static
    {
        $this->uuid = strtoupper($uuid);

        return $this;
    }

    /**
     * Get uuid.
     */
    public function getUuid(): string
    {
        return $this->uuid;
    }

    /**
     * Set contacted.
     */
    public function setContacted(DateTimeInterface $contacted): static
    {
        $this->contacted = $contacted;

        return $this;
    }

    /**
     * Get contacted.
     */
    public function getContacted(): DateTimeInterface
    {
        return $this->contacted;
    }

    /**
     * Set ojsVersion.
     */
    public function setOjsVersion(?string $ojsVersion): static
    {
        $this->ojsVersion = $ojsVersion;

        return $this;
    }

    /**
     * Get ojsVersion.
     */
    public function getOjsVersion(): ?string
    {
        return $this->ojsVersion;
    }

    /**
     * Set notified.
     */
    public function setNotified(?DateTimeInterface $notified): static
    {
        $this->notified = $notified;

        return $this;
    }

    /**
     * Get notified.
     */
    public function getNotified(): ?DateTimeInterface
    {
        return $this->notified;
    }

    /**
     * Set title.
     */
    public function setTitle(?string $title): static
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title.
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Set issn.
     */
    public function setIssn(?string $issn): static
    {
        $this->issn = $issn;

        return $this;
    }

    /**
     * Get issn.
     */
    public function getIssn(): ?string
    {
        return $this->issn;
    }

    /**
     * Set url.
     */
    public function setUrl(string $url): static
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get url.
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * Return the ping gateway url.
     */
    public function getGatewayUrl(): string
    {
        return $this->url . self::GATEWAY_URL_SUFFIX;
    }

    /**
     * Set status.
     */
    public function setStatus(string $status): static
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Set termsAccepted.
     */
    public function setTermsAccepted(bool $termsAccepted): static
    {
        $this->termsAccepted = $termsAccepted;

        return $this;
    }

    /**
     * Get termsAccepted.
     */
    public function getTermsAccepted(): bool
    {
        return $this->termsAccepted;
    }

    /**
     * Set email.
     */
    public function setEmail(?string $email): static
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Set publisherName.
     */
    public function setPublisherName(?string $publisherName): static
    {
        $this->publisherName = $publisherName;

        return $this;
    }

    /**
     * Get publisherName.
     */
    public function getPublisherName(): ?string
    {
        return $this->publisherName;
    }

    /**
     * Set publisherUrl.
     */
    public function setPublisherUrl(?string $publisherUrl): static
    {
        $this->publisherUrl = $publisherUrl;

        return $this;
    }

    /**
     * Get publisherUrl.
     */
    public function getPublisherUrl(): ?string
    {
        return $this->publisherUrl;
    }

    /**
     * Add deposit.
     */
    public function addDeposit(Deposit $deposit): static
    {
        $this->deposits[] = $deposit;

        return $this;
    }

    /**
     * Remove deposit.
     */
    public function removeDeposit(Deposit $deposit): void
    {
        $this->deposits->removeElement($deposit);
    }

    /**
     * Get deposits.
     * @return PersistentCollection<int,Deposit>|(Collection<int,Deposit> & iterable<Deposit>)
     */
    public function getDeposits(): Collection
    {
        return $this->deposits;
    }

    /**
     * Get the deposits which have been set to LOCKSSOMatic, but which may not have
     * achieved agreement yet.
     *
     * Deposits returned will be in state deposited, complete, or status-error. Those
     * have all been sent to lockss.
     *
     * @return Collection<(int|string), Deposit>
     */
    public function getSentDeposits(): mixed
    {
        $criteria = Criteria::create()->where(Criteria::expr()->in('state', self::SENT_STATES));
        $deposits = $this->getDeposits();
        \assert($deposits instanceof PersistentCollection);
        return $deposits->matching($criteria);
    }
}
